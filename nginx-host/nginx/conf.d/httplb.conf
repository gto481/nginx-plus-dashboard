upstream httplb_backend {
    #hash $remote_addr consistent;
    zone httplb_backend 64k; # Add this line
    server 10.1.1.5:9090;
    server 10.1.1.5:9091;
    server 10.1.1.5:9092;
    #least_conn; # Use Least Connections method
    #sticky cookie srv_id expires=1h domain=.local; # Sticky cookie for session persistence
    #sticky cookie srv_id expires=1h path=/ domain=.local;
    # Learn stickiness from PHPSESSID cookie
    sticky learn create=$upstream_cookie_PHPSESSID lookup=$cookie_PHPSESSID zone=php_sessions:1m;

}

server {

    listen 443 ssl default_server;
    status_zone httplb-server-zone;
    server_name httplb.local;
    ssl_certificate     /etc/nginx/cert/httplb-cert.crt;
    ssl_certificate_key /etc/nginx/cert/httplb-cert.key;
    access_log  /var/log/nginx/httplb-access.log main buffer=16k;
    error_log /var/log/nginx/httplb-error.log warn;
    location / {
        app_protect_enable on;
        app_protect_policy_file "/etc/app_protect/bundles/policy-demo.tgz";
        app_protect_security_log_enable on;
        app_protect_security_log "/etc/app_protect/bundles/nap_log_profile.json_dashboard.tgz" syslog:server=10.1.1.7:8515;
        proxy_pass http://httplb_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        status_zone httplb-location-zone;
	    health_check uri=/ match=200_ok_custom fails=1 passes=1 interval=3s;
    }
}
match 200_ok_custom {
    status 200-299;
}